dist: bionic
sudo: required
language: cpp

cache:
 - apt

before_install:
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  - sudo apt-get update -qq
  - sudo apt-get install -qq -y gcc-multilib g++-multilib libc6-i386 libc6-dev-i386 lib32stdc++6 lib32z1 sloccount cppcheck

env:
  global:
    - TEST_NAME=""

before_script:
 - echo ${TEST_NAME}

matrix:
  include:
    - env:    TEST_NAME="gcc (host)"
      compiler: gcc
      language: cpp
      script:
        - $CXX --version
        - make -s -j2 DEFAULT_TARGET=shared_release

# ARM build disabled until we get GCC 4.9 cross compiler
#    - env:    TEST_NAME="arm-linux-gnueabi-gcc (target)"
#      compiler: gcc
#      language: cpp
#      script:
#        - sudo apt-get install -qq -y g++-arm-linux-gnueabihf
#        - arm-linux-gnueabihf-g++ --version
#        - make -s -j2 hosttools DEFAULT_TARGET=shared_release
#        - POCO_CONFIG=ARM-Linux make -s -j2 DEFAULT_TARGET=shared_release TOOL=arm-linux-gnueabihf

    # QA jobs for code analytics and metrics
    # static code analysis with cppcheck (we can add --enable=all later)
#    - env:    TEST_NAME="cppcheck"
#      script: cppcheck --force --quiet --inline-suppr -j2 -iplatform/Data/SQLite/src/sqlite3.c .
    # search for TODO within source tree
    - env:    TEST_NAME="TODO"
      script: grep -r TODO *
    # search for FIXME within source tree
    - env:    TEST_NAME="FIXME"
      script: grep -r FIXME *
    # search for HACK within source tree
    - env:    TEST_NAME="HACK"
      script: grep -r HACK *
    # some statistics about the code base
    - env:    TEST_NAME="sloccount"
      script: sloccount .
